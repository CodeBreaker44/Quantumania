(()=>{"use strict";function t(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,(function(t){var e=16*Math.random()|0;return("x"===t?e:3&e|8).toString(16)}))}var e,r,n;!function(t){t.AJAX_ERROR="ajax",t.RESOURCE_ERROR="resource",t.VUE_ERROR="vue",t.PROMISE_ERROR="promise",t.JS_ERROR="js",t.UNKNOWN_ERROR="unknown"}(e||(e={})),function(t){t.INFO="Info",t.WARNING="Warning",t.ERROR="Error"}(r||(r={})),function(t){t.ERROR="/browser/errorLog",t.ERRORS="/browser/errorLogs",t.PERF="/browser/perfData",t.SEGMENT="/v3/segment",t.SEGMENTS="/v3/segments"}(n||(n={}));var o,i="Http",a="Exit";!function(t){t[t.OPENED=1]="OPENED",t[t.DONE=4]="DONE"}(o||(o={}));var s=10001;const c=function(){function t(t,e){this.url="","ERROR"===t?this.url=e+n.ERROR:"ERRORS"===t?this.url=e+n.ERRORS:"SEGMENT"===t?this.url=e+n.SEGMENT:"SEGMENTS"===t?this.url=e+n.SEGMENTS:"PERF"===t&&(this.url=e+n.PERF)}return t.prototype.sendByFetch=function(t){if(delete t.collector,this.url){var e=new Request(this.url,{method:"POST",body:JSON.stringify(t)});fetch(e).then((function(t){if(t.status>=400||0===t.status)throw new Error("Something went wrong on api server!")})).catch((function(t){console.error(t)}))}},t.prototype.sendByXhr=function(t){if(this.url){var e=new XMLHttpRequest;e.open("post",this.url,!0),e.setRequestHeader("Content-Type","application/json"),e.onreadystatechange=function(){4===e.readyState&&e.status<400&&console.log("Report successfully")},e.send(JSON.stringify(t))}},t.prototype.sendByBeacon=function(t){this.url&&("function"!=typeof navigator.sendBeacon?this.sendByXhr(t):navigator.sendBeacon(this.url,JSON.stringify(t)))},t}(),u=new(function(){function t(){this.queues=[],this.collector=""}return t.prototype.addTask=function(t,e){this.queues.push(t),this.collector=e},t.prototype.fireTasks=function(){this.queues&&this.queues.length&&(new c("ERRORS",this.collector).sendByXhr(this.queues),this.queues=[])},t.prototype.finallyFireTasks=function(){var t=this;window.addEventListener("beforeunload",(function(){t.queues.length&&new c("ERRORS",t.collector).sendByBeacon(t.queues)}))},t}());var l,p={};const f=function(){function t(){this.logInfo={uniqueId:"",service:"",serviceVersion:"",pagePath:"",category:e.UNKNOWN_ERROR,grade:r.INFO,errorUrl:"",line:0,col:0,message:"",firstReportedError:!1,collector:""}}return t.prototype.traceInfo=function(t){var r;this.logInfo=t||this.logInfo;var n=[e.AJAX_ERROR,e.RESOURCE_ERROR,e.UNKNOWN_ERROR];p[location.href]||n.includes(this.logInfo.category)||((r={})[location.href]=!0,p=r,this.logInfo.firstReportedError=!0);var o=this.logInfo.collector;delete this.logInfo.collector,u.addTask(this.logInfo,o),u.finallyFireTasks(),l||(l=setInterval((function(){u.fireTasks()}),6e4))},t}();var h,g=(h=function(t,e){return h=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},h(t,e)},function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}h(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}),d=function(){return d=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},d.apply(this,arguments)};const v=new(function(n){function o(){var t=null!==n&&n.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return g(o,n),o.prototype.handleErrors=function(n){var o=this;this.infoOpt=n,window.onerror=function(i,a,s,c,u){o.logInfo=d(d({},o.infoOpt),{uniqueId:t(),category:e.JS_ERROR,grade:r.ERROR,errorUrl:a,line:s,col:c,message:i,collector:n.collector,stack:u?u.stack:""}),o.traceInfo()}},o.prototype.setOptions=function(t){this.infoOpt=t},o}(f));var y=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),m=function(){return m=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},m.apply(this,arguments)};const O=new(function(n){function o(){var t=null!==n&&n.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return y(o,n),o.prototype.handleErrors=function(n){var o=this;this.infoOpt=n,window.addEventListener("unhandledrejection",(function(i){try{var a="";if(!i||!i.reason)return;i.reason.config&&i.reason.config.url&&(a=i.reason.config.url),o.logInfo=m(m({},o.infoOpt),{uniqueId:t(),category:e.PROMISE_ERROR,grade:r.ERROR,errorUrl:a||location.href,message:i.reason.message,stack:i.reason.stack,collector:n.collector}),o.traceInfo()}catch(t){console.log(t)}}))},o.prototype.setOptions=function(t){this.infoOpt=t},o}(f));var E=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),w=function(){return w=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},w.apply(this,arguments)};const R=new(function(o){function i(){var t=null!==o&&o.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return E(i,o),i.prototype.handleError=function(o){var i=this;window.XMLHttpRequest&&(this.infoOpt=o,window.addEventListener("xhrReadyStateChange",(function(a){var s=a.detail;4===s.readyState&&s.getRequestConfig[1]!==o.collector+n.ERRORS&&(0!==s.status&&s.status<400||(i.logInfo=w(w({},i.infoOpt),{uniqueId:t(),category:e.AJAX_ERROR,grade:r.ERROR,errorUrl:s.getRequestConfig[1],message:"status: ".concat(s.status,"; statusText: ").concat(s.statusText,";"),collector:o.collector,stack:s.responseText}),i.traceInfo()))})))},i.prototype.setOptions=function(t){this.infoOpt=t},i}(f));var S=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),b=function(){return b=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},b.apply(this,arguments)};const T=new(function(n){function o(){var t=null!==n&&n.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return S(o,n),o.prototype.handleErrors=function(n){var o=this;this.infoOpt=n,window.addEventListener("error",(function(i){try{if(!i)return;var a=i.target;if(!(a instanceof HTMLScriptElement||a instanceof HTMLLinkElement||a instanceof HTMLImageElement))return;o.logInfo=b(b({},o.infoOpt),{uniqueId:t(),category:e.RESOURCE_ERROR,grade:"IMG"===a.tagName?r.WARNING:r.ERROR,errorUrl:a.src||a.href||location.href,message:"load ".concat(a.tagName," resource error"),collector:n.collector,stack:"load ".concat(a.tagName," resource error")}),o.traceInfo()}catch(t){throw t}}))},o.prototype.setOptions=function(t){this.infoOpt=t},o}(f));var I=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),P=function(){return P=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},P.apply(this,arguments)};const x=new(function(n){function o(){var t=null!==n&&n.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return I(o,n),o.prototype.handleErrors=function(n,o){var i=this;this.infoOpt=n,o&&o.config&&(o.config.errorHandler=function(o,a,s){try{i.logInfo=P(P({},i.infoOpt),{uniqueId:t(),category:e.VUE_ERROR,grade:r.ERROR,errorUrl:location.href,message:s,collector:n.collector,stack:o.stack}),i.traceInfo()}catch(o){throw o}})},o.prototype.setOptions=function(t){this.infoOpt=t},o}(f));var _=function(){var t=function(e,r){return t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},t(e,r)};return function(e,r){if("function"!=typeof r&&null!==r)throw new TypeError("Class extends value "+String(r)+" is not a constructor or null");function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}(),C=function(){return C=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},C.apply(this,arguments)};const A=new(function(n){function o(){var t=null!==n&&n.apply(this,arguments)||this;return t.infoOpt={service:"",pagePath:"",serviceVersion:""},t}return _(o,n),o.prototype.handleErrors=function(n,o){this.infoOpt=n,this.logInfo=C(C({},this.infoOpt),{uniqueId:t(),category:e.JS_ERROR,grade:r.ERROR,errorUrl:o.name||location.href,message:o.message,collector:n.collector||location.origin,stack:o.stack}),this.traceInfo()},o}(f)),N=function(){function t(){}return t.prototype.getPerfTiming=function(){try{var t=window.performance.timing;if("function"==typeof window.PerformanceNavigationTiming){var e=performance.getEntriesByType("navigation")[0];e&&(t=e)}return{redirectTime:void 0!==t.navigationStart?parseInt(String(t.fetchStart-t.navigationStart),10):void 0!==t.redirectEnd?parseInt(String(t.redirectEnd-t.redirectStart),10):0,dnsTime:parseInt(String(t.domainLookupEnd-t.domainLookupStart),10),ttfbTime:parseInt(String(t.responseStart-t.requestStart),10),tcpTime:parseInt(String(t.connectEnd-t.connectStart),10),transTime:parseInt(String(t.responseEnd-t.responseStart),10),domAnalysisTime:parseInt(String(t.domInteractive-t.responseEnd),10),fptTime:parseInt(String(t.responseEnd-t.fetchStart),10),domReadyTime:parseInt(String(t.domContentLoadedEventEnd-t.fetchStart),10),loadPageTime:parseInt(String(t.loadEventStart-t.fetchStart),10),resTime:parseInt(String(t.loadEventStart-t.domContentLoadedEventEnd),10),sslTime:"https:"===location.protocol&&t.secureConnectionStart>0?parseInt(String(t.connectEnd-t.secureConnectionStart),10):void 0,ttlTime:parseInt(String(t.domInteractive-t.fetchStart),10),firstPackTime:parseInt(String(t.responseStart-t.domainLookupStart),10),fmpTime:0}}catch(t){throw t}},t}();var j,k=function(t,e){return window.getComputedStyle?window.getComputedStyle(t,null)[e]:t.currentStyle[e]};!function(t){t[t.SVG=2]="SVG",t[t.IMG=2]="IMG",t[t.CANVAS=4]="CANVAS",t[t.OBJECT=4]="OBJECT",t[t.EMBED=4]="EMBED",t[t.VIDEO=4]="VIDEO"}(j||(j={}));var L=performance.now(),M=["SCRIPT","STYLE","META","HEAD","LINK"],V=window.innerWidth,D=window.innerHeight;const F=function(){function t(){this.fmpTime=0,this.statusCollector=[],this.flag=!0,this.observer=null,this.callbackCount=0,this.entries={},performance&&performance.getEntries?this.initObserver():console.log("your browser do not support performance.getEntries")}return t.prototype.getFirstSnapShot=function(){var t=performance.now(),e=document.body;e&&this.setTag(e,this.callbackCount),this.statusCollector.push({time:t})},t.prototype.initObserver=function(){var t=this;this.getFirstSnapShot(),this.observer=new MutationObserver((function(){t.callbackCount+=1;var e=performance.now(),r=document.body;r&&t.setTag(r,t.callbackCount),t.statusCollector.push({time:e})})),this.observer.observe(document,{childList:!0,subtree:!0}),this.calculateFinalScore()},t.prototype.calculateFinalScore=function(){var t=this;if(this.flag&&MutationObserver)if(this.checkNeedCancel(L)){this.observer.disconnect(),this.flag=!1;for(var e=null,r=0,n=this.getTreeScore(document.body).dpss;r<n.length;r++){var o=n[r];e&&e.st?e.st<o.st&&(e=o):e=o}if(performance.getEntries().forEach((function(e){t.entries[e.name]=e.responseEnd})),!e)return!1;var i=this.filterResult(e.els),a=this.getFmpTime(i);this.fmpTime=a}else setTimeout((function(){t.calculateFinalScore()}),2e3)},t.prototype.getFmpTime=function(t){for(var e=0,r=0,n=t;r<n.length;r++){var o=n[r],i=0;if(1===o.weight){var a=parseInt(o.ele.getAttribute("fmp_c"),10);i=this.statusCollector[a]&&this.statusCollector[a].time}else if(2===o.weight)if("IMG"===o.ele.tagName)i=this.entries[o.ele.src];else if("SVG"===o.ele.tagName)a=parseInt(o.ele.getAttribute("fmp_c"),10),i=this.statusCollector[a]&&this.statusCollector[a].time;else{var s=k(o.ele,"background-image").match(/url\(\"(.*?)\"\)/),c="";s&&s[1]&&(c=s[1]),c.includes("http")||(c=location.protocol+s[1]),i=this.entries[c]}else 4===o.weight&&("CANVAS"===o.ele.tagName?(a=parseInt(o.ele.getAttribute("fmp_c"),10),i=this.statusCollector[a]&&this.statusCollector[a].time):"VIDEO"===o.ele.tagName&&((i=this.entries[o.ele.src])||(i=this.entries[o.ele.poster])));"number"!=typeof i&&(i=0),e<i&&(e=i)}return e},t.prototype.filterResult=function(t){if(1===t.length)return t;var e=0;t.forEach((function(t){e+=t.st}));var r=e/t.length;return t.filter((function(t){return t.st>r}))},t.prototype.checkNeedCancel=function(t){var e=performance.now()-t,r=this.statusCollector.length>0?this.statusCollector[this.statusCollector.length-1].time:0;return e>3e3||e-r>1e3},t.prototype.getTreeScore=function(t){if(!t)return{};for(var e=[],r=0,n=t.children;r<n.length;r++){var o=n[r];if(o.getAttribute("fmp_c")){var i=this.getTreeScore(o);i.st&&e.push(i)}}return this.calcaulteGrades(t,e)},t.prototype.calcaulteGrades=function(t,e){var r=t.getBoundingClientRect(),n=r.width,o=r.height,i=r.left,a=r.top,s=!0;(D<a||V<i)&&(s=!1);var c=0;e.forEach((function(t){c+=t.st}));var u=Number(j[t.tagName])||1;1===u&&k(t,"background-image")&&"initial"!==k(t,"background-image")&&"none"!==k(t,"background-image")&&(u=j.IMG);var l=s?n*o*u:0,p=[{ele:t,st:l,weight:u}],f=t,h=this.calculateAreaParent(t);if(c>l*h||0===h){l=c,p=[];for(var g=0,d=e;g<d.length;g++){var v=d[g];p=p.concat(v.els)}}return{dpss:e,st:l,els:p,root:f}},t.prototype.calculateAreaParent=function(t){var e=t.getBoundingClientRect(),r=e.left,n=e.right,o=e.top,i=e.bottom,a=e.width,s=e.height,c=V,u=D,l=n-r+(c-0)-(Math.max(n,c)-Math.min(r,0)),p=i-o+(u-0)-(Math.max(i,u)-Math.min(o,0));return l<=0||p<=0?0:l*p/(a*s)},t.prototype.setTag=function(t,e){var r=t.tagName;if(-1===M.indexOf(r)){var n=t.children;if(n&&n.length>0)for(var o=n.length-1;o>=0;o--){var i=n[o];if(null===i.getAttribute("fmp_c")){var a=i.getBoundingClientRect(),s=a.left,c=a.top,u=a.width,l=a.height;if(D<c||V<s||0===u||0===l)continue;i.setAttribute("fmp_c","".concat(e))}this.setTag(i,e)}}},t}();var q=function(){return q=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},q.apply(this,arguments)};const U=new(function(){function t(){this.perfConfig={perfDetail:{}}}return t.prototype.getPerf=function(t){var e=this;this.recordPerf(t),t.enableSPA&&window.addEventListener("hashchange",(function(){e.recordPerf(t)}),!1)},t.prototype.recordPerf=function(t){return e=this,r=void 0,o=function(){var e,r=this;return function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}}(this,(function(n){switch(n.label){case 0:return e={fmpTime:void 0},t.autoTracePerf&&t.useFmp?[4,new F]:[3,2];case 1:e=n.sent(),n.label=2;case 2:return setTimeout((function(){t.autoTracePerf&&(r.perfConfig.perfDetail=(new N).getPerfTiming());var n=t.autoTracePerf?q(q({},r.perfConfig.perfDetail),{fmpTime:t.useFmp?parseInt(String(e.fmpTime),10):void 0}):void 0,o=q(q({},n),{pagePath:t.pagePath,serviceVersion:t.serviceVersion,service:t.service});new c("PERF",t.collector).sendByXhr(o),r.clearPerf()}),6e3),[2]}}))},new((n=void 0)||(n=Promise))((function(t,i){function a(t){try{c(o.next(t))}catch(t){i(t)}}function s(t){try{c(o.throw(t))}catch(t){i(t)}}function c(e){var r;e.done?t(e.value):(r=e.value,r instanceof n?r:new n((function(t){t(r)}))).then(a,s)}c((o=o.apply(e,r||[])).next())}));var e,r,n,o},t.prototype.clearPerf=function(){window.performance&&window.performance.clearResourceTimings&&(window.performance.clearResourceTimings(),this.perfConfig={perfDetail:{}})},t}()),B="function"==typeof btoa,G="function"==typeof Buffer,H=("function"==typeof TextDecoder&&new TextDecoder,"function"==typeof TextEncoder?new TextEncoder:void 0),X=Array.prototype.slice.call("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="),W=((t=>{let e={};t.forEach(((t,r)=>e[t]=r))})(X),String.fromCharCode.bind(String)),J=("function"==typeof Uint8Array.from&&Uint8Array.from.bind(Uint8Array),t=>t.replace(/=/g,"").replace(/[+\/]/g,(t=>"+"==t?"-":"_"))),K=B?t=>btoa(t):G?t=>Buffer.from(t,"binary").toString("base64"):t=>{let e,r,n,o,i="";const a=t.length%3;for(let a=0;a<t.length;){if((r=t.charCodeAt(a++))>255||(n=t.charCodeAt(a++))>255||(o=t.charCodeAt(a++))>255)throw new TypeError("invalid character found");e=r<<16|n<<8|o,i+=X[e>>18&63]+X[e>>12&63]+X[e>>6&63]+X[63&e]}return a?i.slice(0,a-3)+"===".substring(a):i},Y=G?t=>Buffer.from(t).toString("base64"):t=>{let e=[];for(let r=0,n=t.length;r<n;r+=4096)e.push(W.apply(null,t.subarray(r,r+4096)));return K(e.join(""))},z=t=>{if(t.length<2)return(e=t.charCodeAt(0))<128?t:e<2048?W(192|e>>>6)+W(128|63&e):W(224|e>>>12&15)+W(128|e>>>6&63)+W(128|63&e);var e=65536+1024*(t.charCodeAt(0)-55296)+(t.charCodeAt(1)-56320);return W(240|e>>>18&7)+W(128|e>>>12&63)+W(128|e>>>6&63)+W(128|63&e)},Q=/[\uD800-\uDBFF][\uDC00-\uDFFFF]|[^\x00-\x7F]/g,Z=G?t=>Buffer.from(t,"utf8").toString("base64"):H?t=>Y(H.encode(t)):t=>K(t.replace(Q,z)),$=(t,e=!1)=>e?J(Z(t)):Z(t);var tt=function(){return tt=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},tt.apply(this,arguments)},et=function(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))},rt={};function nt(e,r){ot(e);var c=window.XMLHttpRequest,u=XMLHttpRequest.prototype.send,l=XMLHttpRequest.prototype.open;if(u&&l){c.getRequestConfig=[],window.XMLHttpRequest=function(){var t=new c;return t.addEventListener("readystatechange",(function(){f.call(this,"xhrReadyStateChange")}),!1),t.open=function(t,e,r,n,o){return this.getRequestConfig=arguments,l.apply(this,arguments)},t.send=function(t){return u.apply(this,arguments)},t};var p=[];window.addEventListener("xhrReadyStateChange",(function(e){var c={traceId:"",service:rt.service,spans:[],serviceInstance:rt.serviceVersion,traceSegmentId:""},u=e.detail.readyState,l=e.detail.getRequestConfig,f={};if(l[1].startsWith("http://")||l[1].startsWith("https://")?f=new URL(l[1]):l[1].startsWith("//")?f=new URL("".concat(window.location.protocol).concat(l[1])):(f=new URL(window.location.href)).pathname=l[1],!rt.noTraceOrigins.some((function(t){if("string"==typeof t){if(t===f.origin)return!0}else if(t instanceof RegExp&&t.test(f.origin))return!0}))){var h=new URL(rt.collector),g="/"===h.pathname?f.pathname:f.pathname.replace(new RegExp("^".concat(h.pathname)),"");if(![n.ERROR,n.ERRORS,n.PERF,n.SEGMENTS].includes(g)||rt.traceSDKInternal){if(u===o.OPENED){var d=t(),v=t();p.push({event:e.detail,startTime:(new Date).getTime(),traceId:d,traceSegmentId:v});var y=String($(d)),m=String($(v)),O=String($(c.service)),E=String($(c.serviceInstance)),w=String($(rt.pagePath)),R=String($(f.host)),S=c.spans.length,b="".concat(1,"-").concat(y,"-").concat(m,"-").concat(S,"-").concat(O,"-").concat(E,"-").concat(w,"-").concat(R);e.detail.setRequestHeader("sw8",b)}if(u===o.DONE){for(var T=(new Date).getTime(),I=0;I<p.length;I++)if(p[I].event.readyState===o.DONE){var P={};p[I].event.status&&(P=new URL(p[I].event.responseURL));var x=[{key:"http.method",value:l[0]},{key:"url",value:p[I].event.responseURL||"".concat(f.protocol,"//").concat(f.host).concat(f.pathname)}],_={operationName:rt.pagePath,startTime:p[I].startTime,endTime:T,spanId:c.spans.length,spanLayer:i,spanType:a,isError:0===e.detail.status||e.detail.status>=400,parentSpanId:c.spans.length-1,componentId:s,peer:P.host,tags:rt.detailMode?rt.customTags?et(et([],x,!0),rt.customTags,!0):x:void 0};(c=tt(tt({},c),{traceId:p[I].traceId,traceSegmentId:p[I].traceSegmentId})).spans.push(_),p.splice(I,1)}r.push(c)}}}}))}else console.error("Tracing is not supported");function f(t){var e=new CustomEvent(t,{detail:this});window.dispatchEvent(e)}}function ot(t){rt=tt(tt({},rt),t)}var it=function(){return it=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},it.apply(this,arguments)},at=function(t,e,r,n){return new(r||(r=Promise))((function(o,i){function a(t){try{c(n.next(t))}catch(t){i(t)}}function s(t){try{c(n.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(a,s)}c((n=n.apply(t,e||[])).next())}))},st=function(t,e){var r,n,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(s){return function(c){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;i&&(i=0,s[0]&&(a=0)),a;)try{if(r=1,n&&(o=2&s[0]?n.return:s[0]?n.throw||((o=n.return)&&o.call(n),0):n.next)&&!(o=o.call(n,s[1])).done)return o;switch(n=0,o&&(s=[2&s[0],o.value]),s[0]){case 0:case 1:o=s;break;case 4:return a.label++,{value:s[1],done:!1};case 5:a.label++,n=s[1],s=[0];continue;case 7:s=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==s[0]&&2!==s[0])){a=0;continue}if(3===s[0]&&(!o||s[1]>o[0]&&s[1]<o[3])){a.label=s[1];break}if(6===s[0]&&a.label<o[1]){a.label=o[1],o=s;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(s);break}o[2]&&a.ops.pop(),a.trys.pop();continue}s=e.call(t,a)}catch(t){s=[6,t],n=0}finally{r=o=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,c])}}},ct=function(t,e,r){if(r||2===arguments.length)for(var n,o=0,i=e.length;o<i;o++)!n&&o in e||(n||(n=Array.prototype.slice.call(e,0,o)),n[o]=e[o]);return t.concat(n||Array.prototype.slice.call(e))},ut={};function lt(t){ut=it(it({},ut),t)}function pt(t){ot(t),lt(t)}var ft=function(){return ft=Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var o in e=arguments[r])Object.prototype.hasOwnProperty.call(e,o)&&(t[o]=e[o]);return t},ft.apply(this,arguments)};const ht={customOptions:{collector:location.origin,jsErrors:!0,apiErrors:!0,resourceErrors:!0,autoTracePerf:!0,useFmp:!1,enableSPA:!1,traceSDKInternal:!1,detailMode:!0,noTraceOrigins:[],traceTimeInterval:6e4},register:function(o){var u,l;this.customOptions=ft(ft({},this.customOptions),o),this.validateOptions(),this.catchErrors(this.customOptions),this.customOptions.enableSPA||this.performance(this.customOptions),nt(u=this.customOptions,l=[]),function(o,c){var u=this,l=window.fetch;lt(o),window.fetch=function(){for(var o=[],p=0;p<arguments.length;p++)o[p]=arguments[p];return at(u,void 0,void 0,(function(){var u,p,h,g,d,v,y,m,O,E,w,R,S,b,T,I,P,x,_,C,A,N,j,k;return st(this,(function(L){switch(L.label){case 0:return u=(new Date).getTime(),p=t(),h=t(),g={traceId:"",service:ut.service,spans:[],serviceInstance:ut.serviceVersion,traceSegmentId:""},d={},"[object Request]"===Object.prototype.toString.call(o[0])?d=new URL(o[0].url):o[0].startsWith("http://")||o[0].startsWith("https://")?d=new URL(o[0]):o[0].startsWith("//")?d=new URL("".concat(window.location.protocol).concat(o[0])):(d=new URL(window.location.href)).pathname=o[0],v=ut.noTraceOrigins.some((function(t){if("string"==typeof t){if(t===d.origin)return!0}else if(t instanceof RegExp&&t.test(d.origin))return!0})),y=new URL(ut.collector),m="/"===y.pathname?d.pathname:d.pathname.replace(new RegExp("^".concat(y.pathname)),""),O=[n.ERROR,n.ERRORS,n.PERF,n.SEGMENTS],E=O.includes(m),(w=!v||E&&ut.traceSDKInternal)&&(R=String($(p)),S=String($(h)),b=String($(g.service)),T=String($(g.serviceInstance)),I=String($(ut.pagePath)),P=String($(d.host)),x=g.spans.length,_="".concat(1,"-").concat(R,"-").concat(S,"-").concat(x,"-").concat(b,"-").concat(T,"-").concat(I,"-").concat(P),o[1]||(o[1]={}),o[1].headers||(o[1].headers={}),o[1].headers.sw8=_),[4,l.apply(void 0,o)];case 1:C=L.sent();try{C&&(0===C.status||C.status>=400)&&(A={uniqueId:t(),service:ut.service,serviceVersion:ut.serviceVersion,pagePath:ut.pagePath,category:e.AJAX_ERROR,grade:r.ERROR,errorUrl:C&&C.url||"".concat(d.protocol,"//").concat(d.host).concat(d.pathname),message:"status: ".concat(C?C.status:0,"; statusText: ").concat(C&&C.statusText,";"),collector:ut.collector,stack:"Fetch: "+C&&C.statusText},(new f).traceInfo(A)),w&&(N=[{key:"http.method",value:o[1].method||"GET"},{key:"url",value:C&&C.url||"".concat(d.protocol,"//").concat(d.host).concat(d.pathname)}],j=(new Date).getTime(),k={operationName:ut.pagePath,startTime:u,endTime:j,spanId:g.spans.length,spanLayer:i,spanType:a,isError:C&&(0===C.status||C.status>=400),parentSpanId:g.spans.length-1,componentId:s,peer:d.host,tags:ut.detailMode?ut.customTags?ct(ct([],N,!0),ut.customTags,!0):N:void 0},(g=it(it({},g),{traceId:p,traceSegmentId:h})).spans.push(k),c.push(g))}catch(t){throw t}return[2,C.clone()]}}))}))}}(u,l),window.addEventListener("beforeunload",(function(){l.length&&new c("SEGMENTS",u.collector).sendByBeacon(l)})),setInterval((function(){l.length&&(new c("SEGMENTS",u.collector).sendByXhr(l),l.splice(0,l.length))}),u.traceTimeInterval)},performance:function(t){"complete"===document.readyState?U.getPerf(t):window.addEventListener("load",(function(){U.getPerf(t)}),!1)},catchErrors:function(t){var e=t.service,r=t.pagePath,n=t.serviceVersion,o=t.collector;t.jsErrors&&(v.handleErrors({service:e,pagePath:r,serviceVersion:n,collector:o}),O.handleErrors({service:e,pagePath:r,serviceVersion:n,collector:o}),t.vue&&x.handleErrors({service:e,pagePath:r,serviceVersion:n,collector:o},t.vue)),t.apiErrors&&R.handleError({service:e,pagePath:r,serviceVersion:n,collector:o}),t.resourceErrors&&T.handleErrors({service:e,pagePath:r,serviceVersion:n,collector:o})},setPerformance:function(t){this.customOptions=ft(ft(ft({},this.customOptions),t),{useFmp:!1}),this.validateOptions(),this.performance(this.customOptions);var e=this.customOptions,r=e.service,n=e.pagePath,o=e.serviceVersion,i=e.collector;this.customOptions.jsErrors&&(v.setOptions({service:r,pagePath:n,serviceVersion:o,collector:i}),O.setOptions({service:r,pagePath:n,serviceVersion:o,collector:i}),this.customOptions.vue&&x.setOptions({service:r,pagePath:n,serviceVersion:o,collector:i})),this.customOptions.apiErrors&&R.setOptions({service:r,pagePath:n,serviceVersion:o,collector:i}),this.customOptions.resourceErrors&&T.setOptions({service:r,pagePath:n,serviceVersion:o,collector:i}),pt(this.customOptions)},reportFrameErrors:function(t,e){A.handleErrors(t,e)},validateTags:function(t){if(!t)return!1;if(!Array.isArray(t))return this.customOptions.customTags=void 0,console.error("customTags error"),!1;for(var e=!0,r=0,n=t;r<n.length;r++){var o=n[r];o&&o.key&&o.value||(e=!1)}return!!e||(this.customOptions.customTags=void 0,console.error("customTags error"),!1)},validateOptions:function(){var t=this.customOptions,e=t.collector,r=t.service,n=t.pagePath,o=t.serviceVersion,i=t.jsErrors,a=t.apiErrors,s=t.resourceErrors,c=t.autoTracePerf,u=t.useFmp,l=t.enableSPA,p=t.traceSDKInternal,f=t.detailMode,h=t.noTraceOrigins,g=t.traceTimeInterval,d=t.customTags,v=t.vue;this.validateTags(d),"string"!=typeof e&&(this.customOptions.collector=location.origin),"string"!=typeof r&&(this.customOptions.service=""),"string"!=typeof n&&(this.customOptions.pagePath=""),"string"!=typeof o&&(this.customOptions.serviceVersion=""),"boolean"!=typeof i&&(this.customOptions.jsErrors=!0),"boolean"!=typeof a&&(this.customOptions.apiErrors=!0),"boolean"!=typeof s&&(this.customOptions.resourceErrors=!0),"boolean"!=typeof c&&(this.customOptions.autoTracePerf=!0),"boolean"!=typeof u&&(this.customOptions.useFmp=!1),"boolean"!=typeof l&&(this.customOptions.enableSPA=!1),"boolean"!=typeof p&&(this.customOptions.traceSDKInternal=!1),"boolean"!=typeof f&&(this.customOptions.detailMode=!0),"boolean"!=typeof f&&(this.customOptions.detailMode=!0),Array.isArray(h)||(this.customOptions.noTraceOrigins=[]),"number"!=typeof g&&(this.customOptions.traceTimeInterval=6e4),"function"!=typeof v&&(this.customOptions.vue=void 0)},setCustomTags:function(t){var e=ft(ft({},this.customOptions),{customTags:t});this.validateTags(t)&&pt(e)}};window.ClientMonitor=ht})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,